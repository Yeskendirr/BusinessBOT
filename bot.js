require("dotenv").config();
const { Client, LocalAuth } = require("whatsapp-web.js");
const qrcode = require("qrcode");
const { OpenAI } = require("openai");
const http = require("http");
const fs = require("fs");
const path = require("path");

const client = new Client({
    authStrategy: new LocalAuth(),
});

const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

const botStartTime = new Date();

function generateHtmlWithQrCode(qrCodeUrl) {
    const htmlContent = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>WhatsApp Bot</title>
        </head>
        <body>
            <h1>WhatsApp Bot-“õ–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!</h1>
            <p>“ö–æ—Å—ã–ª—É “Ø—à—ñ–Ω QR-–¥—ã WhatsApp –±–∞“ì–¥–∞—Ä–ª–∞–º–∞—Å—ã–Ω–¥–∞ —Å–∫–∞–Ω–µ—Ä–ª–µ“£—ñ–∑:</p>
            <div id="qr-container">
                <img src="${qrCodeUrl}" alt="QR Code" />
            </div>
        </body>
        </html>
    `;
    
    const filePath = path.join(__dirname, 'index.html');
    
    fs.writeFileSync(filePath, htmlContent, 'utf-8');
    console.log('index.html —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
}

const server = http.createServer((req, res) => {
    if (req.url === '/') {
        const filePath = path.join(__dirname, 'index.html');

        if (fs.existsSync(filePath)) {
            res.writeHead(200, { 'Content-Type': 'text/html' });
            fs.createReadStream(filePath).pipe(res);
        } else {
            res.writeHead(500, { 'Content-Type': 'text/plain' });
            res.end("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end("Not Found");
    }
});

client.on("qr", (qr) => {
    qrcode.toDataURL(qr, (err, url) => {
        if (err) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:", err);
            return;
        }
        
        generateHtmlWithQrCode(url);
    });
});

client.on("ready", () => {
    console.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
});

client.on("message", async (message) => {
    if (message.isGroupMsg) return;

    if (message.fromMe || message.author) return;

    if (message.timestamp * 1000 < botStartTime.getTime()) return;

    console.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${message.from}: ${message.body}`);

    const aiResponse = await getChatGPTResponse(message.body);

    await client.sendMessage(message.from, aiResponse);
});

async function getChatGPTResponse(prompt) {
    try {
        const response = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "system", content: "–°–µ–Ω –∑–∞“£–≥–µ—Ä, —ç–∫—Å–ø–µ—Ä—Ç—Å—ñ“£" },
                       { role: "user", content: prompt }],
            temperature: 0.7,
        });
        return response.choices[0].message.content;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ OpenAI:", error);
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ üòï";
    }
}

client.initialize();

server.listen(3000, () => {
    console.log("Server is running on http://localhost:3000");
});
